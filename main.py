"""Program made by Edison Giraldo Aristizabal
University of Antioquia, Medellin, Colombia
August 2019"""

from PyQt5.uic import loadUiType #library to import graphical interface
from matplotlib.figure import Figure 
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar #for graph interaction tools

#Uncomment here if you want to use a web page
"""import firebase_admin #for communication with the web page server
from firebase_admin import credentials
from firebase_admin import db """

import numpy as np
from serial import Serial
import time
import os
from puertos import * #to search for available serial ports

directorio = "EspectrosMossbauerChipkit\\"  #The spectra obtained will be saved in this directory
try:
  os.stat(directorio)
except:
  os.mkdir(directorio)

encoding = 'ascii'
availablePorts = serial_ports()#list of available ports
Ui_MainWindow, QMainWindow = loadUiType('interfazsiu.ui') # interfazsiu.iu is the name of the document generated by QT Designer of the graphical user interface

#Uncomment here if you want to use a web page
"""cred = credentials.Certificate('xxxx.json') #insert your credential here
firebase_admin.initialize_app(cred, {'databaseURL': "https://example.com"}) #insert administrator here
root=db.reference()"""

class Main(QMainWindow, Ui_MainWindow):
	def __init__(self, ):
		super(Main, self).__init__()
		self.setupUi(self)
		
		#channels is the name of an object of the graphic interface
		self.channels.setCurrentIndex(2)#set the channels drop-down initially to 512
		self.currentChannel = self.channels.currentText() #the number of channels is defined as defined in the interface
		self.channels.currentIndexChanged.connect(self.channelChanged) #if the channel is changed
		self.startchannels = int(self.channels.currentText()) #stores the number of channels with which the communication began
		
		#serialport is the name of an object of the graphic interface
		self.currentPort = self.serialport.currentText() 
		self.serialport.currentIndexChanged.connect(self.serialPortChanged)
		
		#start is the name of an object of the graphic interface
		self.start.setCheckable(True) #checkable button
		self.start.clicked.connect(self.buttonClicked)
		self.start.setStyleSheet("background-color: rgb(35,255,0)")
		
		#changerange is the name of an object of the graphic interface
		self.changerange.setCheckable(True)
		self.changerange.clicked.connect(self.buttonRangeClicked)
		self.changerange.setText("Actualizando")
		self.changerange.setStyleSheet("background-color: rgb(35,255,0)")
		self.updaterange = True
		
		self.timer = QtCore.QTimer(self) #create a timer that generates events for this interface
		self.timer.setSingleShot(False) #the event will be displayed several times
		self.timer.timeout.connect(self.timerEvent) #Function executed in each event
		
		self.arduino = Serial(availablePorts[0], 115200,timeout=0)
		self.arduino.flushInput()  #clean the buffer
		self.arduino.close() #close the port
		
		self.directory = "EspectrosMossbauerChipkit\\"+ self.file.toPlainText()+".txt" #directory in which the spectrum is saved
		self.new_directory = "EspectrosMossbauerChipkit\\"+self.file.toPlainText()+".txt" #directory in which the following spectrum will be saved
		self.file.textChanged.connect(self.changeFile)
		self.file.setStyleSheet("background-color: rgb(255,27,0);")
		
		self.dataText = open(self.directory,"w") 
		self.dataText.close()#close the file so you can delete it
		os.remove(self.directory) #delete the unwanted file created on the previous line
		
		self.fig = Figure()
		self.ax1f1 = self.fig.add_subplot(111, xmargin = 0.0)
		self.ax1f1.set_xlim(xmin=0, xmax=self.startchannels)
		self.ax1f1.grid(True)
		self.canvas = FigureCanvas(self.fig)
		self.mplwidgethorizontalLayout.addWidget(self.canvas) 
		self.canvas.draw()
		self.toolbar = NavigationToolbar(self.canvas, self.navtool, coordinates = True)
		self.toolbar.setOrientation(QtCore.Qt.Vertical)
		self.navtoolhorizontalLayout.addWidget(self.toolbar)
		
	def channelChanged(self, i):
		self.currentChannel = self.channels.currentText() 
	
	def serialPortChanged(self, i):
		self.currentPort = self.serialport.currentText()
	
	def buttonClicked(self):
		if self.start.isChecked():
			self.start.setStyleSheet("background-color: rgb(255,27,0)")
			self.start.setText("Finalizar")
			self.directory = "EspectrosMossbauerChipkit\\"+self.file.toPlainText()+".txt" #Take the initial value of the directory
			self.startchannels = int(self.currentChannel) #stores the number of initial channels in case they change it
			self.arduino = Serial(self.currentPort, 115200,timeout=0)
			time.sleep(5) #wait 5 seconds for the communication with the chipkit to begin
			self.arduino.flushInput()  #clean the buffer
			date ='C'+self.currentChannel
			self.arduino.write(str.encode(date)) #send the number of channels
			self.timer.start(10000) #time in milliseconds between events. Activate the timer
			
		else:
			if (self.directory == self.new_directory):
				self.file.setPlainText("Cambie el directorio")
				self.file.setStyleSheet("background-color: rgb(255,27, 0)")
			self.start.setStyleSheet("background-color: rgb(35,255,0)")
			self.start.setText("Inicio")
			self.arduino.write(str.encode('F')) #envia a arduino el la letra de finalizacion
			time.sleep(2)
			self.arduino.flushInput()  #clean the buffer
			self.arduino.close() #close the port
			self.timer.stop()
	
	def buttonRangeClicked(self):
		self.updaterange = not self.updaterange
		if self.changerange.isChecked():
			self.changerange.setText("Esperando...")
			self.changerange.setStyleSheet("background-color: rgb(255,27,0)")
		else:
			self.changerange.setText("Actualizando")
			self.changerange.setStyleSheet("background-color: rgb(35,255,0)")
	
	def addfig(self,points):
		if self.updaterange:
			self.ax1f1.cla()
			self.ax1f1.plot(points, color="black", linewidth=1.0, linestyle="-", scaley = 1)
			self.ax1f1.set_ylim(ymin=min(points)-10, ymax=max(points)+10)
			self.ax1f1.set_xlim(xmin=0, xmax=self.startchannels)
			self.ax1f1.grid(True)
		
		self.canvas.draw()
	
	def timerEvent(self):
		try:
			if(self.arduino.inWaiting() > 0):
				x=self.arduino.readline()
				arduinoData=(x.decode(encoding).split(','))[:-1]
				i = 0
				for element in arduinoData:
					arduinoData[i] = int(element)
					i += 1

				if(len(arduinoData) == self.startchannels):
				#Uncomment here if you want to use a web page
					"""
					a=str(arduinoData).strip('[]')+str(",")
					try:
						new_user = root.child('examplename').set({'datos' : a}) #insert the name of the variable that is associated to the spectrum in the web page
					except:
						pass"""
					self.addfig(arduinoData)
					self.dataText = open(self.directory,"w") #Open directory where data will be saved
					for number in arduinoData[:-1]:
						self.dataText.write(str(number)+'\n')
					self.dataText.write(str(arduinoData[-1]))
					self.dataText.close()
				elif (len(arduinoData) > self.startchannels):
					time.sleep(1)
					self.arduino.flushInput()  #clean the buffer
		except:
			pass
		
	def changeFile(self):
		self.new_directory = self.file.toPlainText()+".txt"
		if(len(self.new_directory) > 4):
			self.file.setStyleSheet("background-color: rgb(35,255,0);")
	
if __name__ == '__main__':
	import sys
	from PyQt5 import QtGui, QtWidgets, QtCore
	
	app = QtWidgets.QApplication(sys.argv)
	main = Main()
	main.ax1f1.plot(np.zeros(512), color="black", linewidth=1.0, linestyle="-")
	for port in availablePorts:
		main.serialport.addItem(port)
	main.show()
	sys.exit(app.exec_())
